<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基礎編 on Git X Edu</title>
    <link>https://a-nakamura1015.github.io/git-education/basics/</link>
    <description>Recent content in 基礎編 on Git X Edu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 16 Mar 2022 07:45:58 +0900</lastBuildDate><atom:link href="https://a-nakamura1015.github.io/git-education/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git の基本</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/git-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:34:33 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/git-basics/</guid>
      <description>Git の基本 皆さんがこれから学ぶのは Git は、ファイルの変更履歴を記録できるバージョン管理システムです。 以下は Git を活用した場合のメリットの一部です。このように Git を活用するとより効率的に開発を進めることができます。
 編集したファイルを過去の状態に戻すことができる 複数人で同じファイルを同時に編集することができる 編集の意図をコメントして残すことができる  本チャプターでは Git の基本を実際にコマンドを実行していきながら学んでいきます。
まずは Git のことを知る前に、事前知識としてリポジトリとバージョン管理システムの概要から理解していきましょう。
リポジトリとは 突然ですが、パソコンで作成したファイルはファイルはどこに保存されているかを意識していますか？
後で探しやすいようにデスクトップに格納する場合もあれば、書類であればドキュメントフォルダに格納することもあるでしょう。
しかし、そこに格納されているのはファイル本体だけで、ファイルの変更履歴は残っていません。
一方でファイルだけでなく、そのファイルの変更履歴を記録することができるのがリポジトリです。
リポジトリは通常のディレクトリ（フォルダ）とは異なり変更履歴を記録しているため、過去の状態を確認したり、過去の状態に戻すことができます。
リポジトリの作り方は後ほど解説しますが、この後リポジトリという用語が何度も登場するので用語の意味をしっかり覚えておきましょう。
 Note リポジトリ：ファイルやその変更履歴の格納場所
  バージョン管理システムとは バージョン管理システムはその名の通り、ファイルの変更履歴（バージョン）を管理するシステムです。
チームでクラウド（ネットワーク）上にあるリポジトリを共有することで手分けをしながら作業ができるようになります。
ファイルに対して誰が、いつ、どのような変更をしたのかを記録することができます。 この記録は先述したリポジトリに蓄積されていきます。
また、変更内容の差分を確認したり、任意のバージョンに戻すことができます。
 Note バージョン管理システム：ファイルに対して「誰が」「いつ」「どのような変更をしたか」を記録し、変更の差分や変更前の状態に復元することができるシステム
  バージョン管理システムには 分散型 と 集中型 の２種類があります。
Git は分散型に分類されるのですが、それぞれの違いについて確認していきましょう。
集中型バージョン管理システム 集中型はリポジトリはクラウド（ネットワーク）に１つのみ存在し、チームメンバーはこのリポジトリに接続して作業を行います。 仕組みは至ってシンプルで、チームメンバーは各自必要なファイルのみをダウンロードして編集します。
編集を終えたら、その編集履歴をクラウド（ネットワーク）上にあるリポジトリにアップロードするという流れになります。
分散型と異なるのは変更を加えた場合はその都度アップロードをする必要があることです。
そのため、集中型には以下のデメリットがあります。
 作業が完了していない状態（エラーが発生する状態）でアップロードをすると、チームメンバーに悪影響を与える可能性があります。 必要なファイルのみをダウンロードしているため、アップロードしてみないとテストができない。  分散型バージョン管理システム リポジトリはクラウド（ネットワーク）上に１つだけではなく、各チームメンバーのデバイス内にも存在します。 各メンバーは自身のデバイス内のリポジトリに対して、ファイルの編集内容を記録していき、 最終的にはデバイス内リポジトリとクラウド（ネットワーク）上のリポジトリを統合（マージ）します。
そのため、分散型には以下のメリットがあります。
 自身の編集（コミット）が他のメンバーへ影響を与えない。 ローカルリポジトリでテストをしてからリモートリポジトリで共有できる。  また、このリポジトリはローカルリポジトリとリモートリポジトリの2種類に分けられます。</description>
    </item>
    <item>
      <title>Git の基本コマンド</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/git-command-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:42:16 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/git-command-basics/</guid>
      <description>Git の基本コマンド Git の操作方法は GUI と CUI に分けられます。
Git の GUI を利用すれば、マウスを使って画面上のアイコンやウィンドウを使用すると簡単に Git を操作することができます。
しかし、以下の理由からコマンドで Git を操作する CUI で学習をすることをお勧めします。
 つまづいたとき、実行したコマンドと表示されたエラーを元にネットで検索をすることで原因が特定しやすい Git に関する記事は GUI よりも CUI の方が圧倒的に多い 実行した内容がログとして残るため、自分がどのような操作をしたのかという証跡が残る  そのため、ある程度慣れたのであれば GUI で Git を操作してもよいと思いますが、この教育コンテンツでは CUI（コマンド）で操作を行います。
ここからは基本的な Git コマンドを紹介します。実際に Git コマンドを実行しながら確認をしていきましょう。
Git コマンドを実行するにはまずローカル（皆さんのPC内）に Git で管理されているディレクトリを用意する必要があります。 Git で管理されているディレクトリを作成する方法は git init と git clone の２種類があります。
それぞれの違いを確認していきましょう。
 既存ディレクトリを Git 管理する git init コマンドにより既に作成済みのディレクトリ（フォルダ）をローカルの Git リポジトリにすることができます。
同コマンドを実行すると、指定したディレクトリに 「.git」 という隠しディレクトリが作成されます。
この「.git」ディレクトリが配下にあるディレクトリは Git リポジトリとして扱われます。
git init [Gitリポジトリにしたいディレクトリのパス（省略可）] [Gitリポジトリにしたいディレクトリのパス]は省略することもでき、その場合はカレントディレクトリ（cdコマンド等で移動した現在のディレクトリ）が Git リポジトリとなります。</description>
    </item>
    <item>
      <title>GitHub の基本</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/github-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:38:25 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/github-basics/</guid>
      <description>GitHub とは ソフトウェア開発のプラットフォームであり、ソースコードを共有するためのホスティングサービス（サーバーの領域を貸し出すサービス）です。
先述したリモートリポジトリはこのサービスが提供してくれます。
GitHub のサーバー上にソースコードを格納することで、チームメンバーとソースコードを共有してコードレビューを行ったり、プロジェクトの管理を行ったりすることができます。
使用用途も様々で、チームメンバーのみがアクセスできるようにすることもできれば、オープンソースとして提供するために世界中のエンジニアにアクセスしてもらえるようにすることもできます。
名称に Git が含まれている通り、GitHub のバージョン管理システムには Git が使用されています。
GitHub を始めてみよう GitHub アカウントを作成しよう GitHubを利用するためにはアカウントを作成する必要があります。
以下の手順に沿って GitHub アカウントを作成しましょう。
注意：GitHub アカウントを作成するにはメールアカウントが必要になります。
 GitHub の公式サイトにアクセスしましょう。
https://github.com/ 画面右上の Sign up をクリックしましょう。  メールアドレスを入力後、Continue ボタンをクリックしましょう。  パスワードを入力後、Continue ボタンをクリックしましょう。
※パスワードは任意の内容でOKです！  ユーザーネームを入力後、Continue ボタンをクリックしましょう。  入力したメールアドレス宛に GitHub から認証コードが送られます。
届いた認証コードを画面に入力しましょう。
 ここからは個人設定となりますが、必須事項ではないので割愛します。
画面下部の Skip personnnaization をクリックしましょう。
 以下の画面が表示されればアカウントの作成は完了です！   リモートリポジトリを作成しよう GitHub アカウントがあれば GitHub 上にリモートリポジトリを作成することができます。
次の手順に沿って作成してみましょう。
 GitHubにログイン後、Create repository ボタンをクリックしましょう。  以下の画面が表示されましたら、以下の手順でリモートリポジトリを作成しましょう。  リポジトリの名前を設定しましょう。今回は tutorial としましょう。 他のユーザーがリポジトリにアクセスできないように非公開にしましょう。</description>
    </item>
    <item>
      <title>まとめ</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/summary/</link>
      <pubDate>Wed, 16 Mar 2022 07:45:58 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/summary/</guid>
      <description>以上が基本編の内容となります。基本編では Git の基礎的な知識やコマンドをおさえました。
これで一人で Git にファイルの変更履歴を残しながら開発を進めることができるようになったはずです。
しかし、チーム開発では基本編の知識だけでは不足しています。
応用編ではチーム開発で必要となる知識とコマンドをおさえていきましょう。</description>
    </item>
  </channel>
</rss>