<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基礎編 on Git X Edu</title>
    <link>https://a-nakamura1015.github.io/git-education/basics/</link>
    <description>Recent content in 基礎編 on Git X Edu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 16 Mar 2022 07:45:58 +0900</lastBuildDate><atom:link href="https://a-nakamura1015.github.io/git-education/basics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git の基本</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/git-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:34:33 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/git-basics/</guid>
      <description>Git の基本 Git は開発現場では不可欠なバージョン管理システムのサービスです。
本チャプターでは Git の基本を実際にコマンドを実行していきながら学んでいきます。
まずは、バージョン管理システムの概要から理解していきましょう。
バージョン管理システムとは ソースコードのようなファイルの変更履歴を管理するシステムを バージョン管理システム と呼びます。
Git はこのバージョン管理システムに分類されます。
ファイルに対する追加・変更・削除の履歴を管理することで、過去の変更箇所を確認したり、任意のバージョンに戻すことができます。
バージョン管理システムには 分散型 と 集中型 の２種類があります。
Git は分散型に分類されるのですが、それぞれの違いについて確認していきましょう。
集中型バージョン管理システム 集中型はリポジトリはリモート環境に１つのみ存在します。 チームメンバーは各自対象のファイルをリモート環境からローカル環境に取得して編集します。
分散型バージョン管理システム リポジトリはリモート環境に１つだけではなく、各メンバーのローカル環境にも存在します。 各メンバーは自身のローカル環境のリポジトリに対して、ファイルの編集内容を記録していき、 最終的にはローカル環境のリポジトリとリモート環境のリポジトリを統合（マージ）します。
分散型のメリット  自身の編集（コミット）が他のメンバーへ影響を与えない。 ⇨ 他のメンバーも同時に作業を進められるため作業効率を上げることができます。 ローカルリポジトリでテストをしてからリモートリポジトリで共有できる。 ⇨ リモートリポジトリに入れたのちにテストをしてバグが発生した場合、他のメンバーにも影響が生じてしまいます。  Git とは Git を触っていると以下のようなハッシュ値をよく見かけると思います。
以下は後々登場する Git のコミットログです。
commit 5c670db6fc4a8d109a5e2724c421cd8105c2598f (HEAD -&amp;gt; master) 実は Git により自身の編集（コミット）ごとに重複することのないハッシュ値が割り当てられています。 このハッシュ値はSHA-1ハッシュと呼ばれており、16進数の文字（0-9とa-f）で構成された40文字の文字列です。 ファイルの内容もしくは Git 内のディレクトリ構造を元に計算されます。
これは Git が内部でもっているデータベースの中で管理するために割り当てられているのです。
そのため、Gitはこのファイルはいつどのように変更したのかという観点は意識しておらず、 この編集でどのファイルをどのように変更したのかという観点で管理をしています。
Git のできること
 ファイルの変更履歴を管理できる ファイルを過去の状態に戻せる ファイルをチームで共有することできる  Git を始めてみよう Git の公式サイトからインストーラーをダウンロードすることができます。</description>
    </item>
    <item>
      <title>Git の基本コマンド</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/git-command-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:42:16 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/git-command-basics/</guid>
      <description>Git の基本コマンド Git は主にコマンドで操作を行います。
ここからは基本的な Git コマンドを紹介します。実際に Git コマンドを実行しながら確認をしていきましょう。
Git コマンドを実行するにはまずローカル（皆さんのPC内）に Git で管理されているディレクトリを用意する必要があります。 Git で管理されているディレクトリを作成する方法は git init と git clone の２種類があります。
それぞれの違いを確認していきましょう。
 既存ディレクトリを Git 管理する git init コマンドにより既に作成済みのディレクトリ（フォルダ）をローカルの Git リポジトリにすることができます。
同コマンドを実行すると、指定したディレクトリに 「.git」 ディレクトリが作成されます。
この「.git」ディレクトリが配下にあるディレクトリは Git リポジトリとして扱われます。
git init [Gitリポジトリにしたいディレクトリのパス（省略可）] [Gitリポジトリにしたいディレクトリのパス]は省略することもでき、その場合はカレントディレクトリ（cdコマンド等で移動した現在のディレクトリ）が Git リポジトリとなります。
DEMO 今回はデスクトップ上に git-tutorial ディレクトリを作成して、作成した同ディレクトリを Git リポジトリにしてみましょう。
cd /Users/UserName/Desktop mkdir git-tutorial git init git-tutorial コマンド実行時に Initialized empty Git repository in /Users/UserName/Desktop/git-tutorial/.git/と表示されれば成功です。 ※上記のメッセージのうち、UserNameにはOSにログインしているユーザー名が表示されます。
git-tutorial フォルダを Git リポジトリにすることができたら、git-tutorial フォルダの配下に「.git」ディレクトリがあることを確認しましょう。
cd git-tutorial ls -al  リモートリポジトリをクローンする GitHubなどに存在するリモートリポジトリをローカルにクローン（コピー）して開発を始めることもできます。</description>
    </item>
    <item>
      <title>GitHub の基本</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/github-basics/</link>
      <pubDate>Wed, 16 Mar 2022 07:38:25 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/github-basics/</guid>
      <description>GitHub とは ソフトウェア開発のプラットフォームであり、ソースコードを共有するためのホスティングサービス（サーバーの領域を貸し出すサービス）です。
先述したリモートリポジトリはこのサービスが提供してくれます。
GitHub のサーバー上にソースコードを格納することで、チームメンバーとソースコードを共有してコードレビューを行ったり、プロジェクトの管理を行ったりすることができます。
使用用途も様々で、チームメンバーのみがアクセスできるようにすることもできれば、オープンソースとして提供するために世界中のエンジニアにアクセスしてもらえるようにすることもできます。
名称に Git が含まれている通り、GitHub のバージョン管理システムには Git が使用されています。
GitHub を始めてみよう GitHub アカウントを作成しよう GitHubを利用するためにはアカウントを作成する必要があります。
以下の手順に沿って GitHub アカウントを作成しましょう。
注意：GitHub アカウントを作成するにはメールアカウントが必要になります。
 GitHub の公式サイトにアクセスしましょう。
https://github.com/ 画面右上の Sign up をクリックしましょう。 メールアドレスを入力後、Continue ボタンをクリックしましょう。 パスワードを入力後、Continue ボタンをクリックしましょう。
※パスワードは任意の内容でOKです！ ユーザーネームを入力後、Continue ボタンをクリックしましょう。 入力したメールアドレス宛に GitHub から認証コードが送られます。
届いた認証コードを画面に入力しましょう。 ここからは個人設定となりますが、必須事項ではないので割愛します。
画面下部の Skip personnnaization をクリックしましょう。 以下の画面が表示されればアカウントの作成は完了です！  リモートリポジトリを作成しよう GitHub アカウントがあれば GitHub 上にリモートリポジトリを作成することができます。
次の手順に沿って作成してみましょう。
 GitHubにログイン後、Create repository ボタンをクリックしましょう。 以下の画面が表示されましたら、以下の手順でリモートリポジトリを作成しましょう。  リポジトリの名前を設定しましょう。今回は tutorial としましょう。 他のユーザーがリポジトリにアクセスできないように非公開にしましょう。
Public を選択すると世界中の GitHub ユーザーがアクセスすることができます。
Private を選択するとリポジトリを作成したアカウントのみがアクセスすることができます。   以下の画面が表示されればリモートリポジトリの作成は完了です！  Point: チームメンバーのみにリモートリポジトリを共有したい場合</description>
    </item>
    <item>
      <title>まとめ</title>
      <link>https://a-nakamura1015.github.io/git-education/basics/summary/</link>
      <pubDate>Wed, 16 Mar 2022 07:45:58 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/basics/summary/</guid>
      <description>以上が基本編の内容となります。基本編では Git の基礎的な知識やコマンドをおさえました。
これで一人で Git にファイルの変更履歴を残しながら開発を進めることができるようになったはずです。
しかし、チーム開発では基本編の知識だけでは不足しています。
応用編ではチーム開発で必要となる知識とコマンドをおさえていきましょう。</description>
    </item>
  </channel>
</rss>