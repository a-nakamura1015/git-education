<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>実践編 on Git X Edu</title>
    <link>https://a-nakamura1015.github.io/git-education/practical/</link>
    <description>Recent content in 実践編 on Git X Edu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 13 May 2022 19:12:09 +0900</lastBuildDate><atom:link href="https://a-nakamura1015.github.io/git-education/practical/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>競合の解消</title>
      <link>https://a-nakamura1015.github.io/git-education/practical/conflict/</link>
      <pubDate>Wed, 16 Mar 2022 08:06:31 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/practical/conflict/</guid>
      <description>Git で起こるトラブル 基礎編と応用編を通して Git の操作にはある程度の自信がついたのではないのかなと思います。
実際に開発プロジェクトでは基礎編と応用編の知識を活かすことで開発を進めることができるでしょう。
しかし、実際の開発プロジェクトでは様々なトラブルが起きるのです。
この実践編ではよくあるトラブルを解消をする方法を学んでいきましょう。
競合の解消 競合とは 変更内容をマージする際に、同じファイルの同じ行が既に変更されていると衝突してしまい「競合（コンフリクト）」と呼ばれる事象が発生します。
競合が発生すると、２つの履歴のうちどちらの変更が正しいかは Git が判断することができないため同ファイルのマージが中断されます。
マージの際に競合が発生すると以下のようなメッセージが表示されます。
Auto-merging sample.txt CONFLICT (content): Merge conflict in sample.txt Automatic merge failed; fix conflicts and then commit the result. チーム開発をしていると競合が起きるのも珍しくありません。 そして、競合が起きるのは決して悪いことではありません。 大事なのは履歴のうちどちらの変更が正しいかの判断を間違えないことです。
競合を解消してみよう 競合を解消すると開発者はつぎのいずれかの選択肢を取ることになります。
マージを中止してマージ前の状態に戻す 競合を解消してマージをする 今回は両方とも試してみましょう。
マージを中止してマージ前の状態に戻す
その場で競合の解消が難しいなどの理由でどうしてもマージができない場合があります。
そのようなときは、以下のコマンドで実行して git merge コマンドを中止することができます。
git merge --abort これは競合の解消ではなくマージを中断しただけのため、
競合箇所を修正せずに再度マージをすると再び競合が発生します。
競合を解消してマージをする
まずは競合を起こしているファイルを開きましょう。
競合が起きている部分はハイライトされているためわかりやすくなっています。
「&amp;laquo;&amp;laquo; HEAD」〜 「==========」が main ブランチにマージされている内容、
「==========」〜 「&amp;raquo;&amp;raquo; develop2」が develop2 ブランチの内容となっています。
今回は develop2 ブランチの内容を正しいということにしましょう。
ハイライトと main ブランチにマージされた内容を削除して、</description>
    </item>
    <item>
      <title>コミットの比較</title>
      <link>https://a-nakamura1015.github.io/git-education/practical/difference/</link>
      <pubDate>Wed, 16 Mar 2022 08:08:47 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/practical/difference/</guid>
      <description>コミットの比較 ファイルを更新すると、「意図した通りに更新できているかな？」や「意図していないところを更新していないかな？」とファイルの更新前後の差分を確認したくなるときがあると思います。
このようなときは git diff コマンドを使いましょう。
このコマンドは指定した2点間のファイルの差分を確認できます。
git diff DEMO
今回は sample.txt の内容を「APPLE」から「ORANGE」に上書きして差分を確認してみましょう。 以下のコマンドで上書きと更新前後の差分の確認をしてみましょう。
echo ORANGE &amp;gt; sample.txt git diff diff --git a/sample.txt b/sample.txt index e427984..fd0eebf 100644 --- a/sample.txt +++ b/sample.txt @@ -1 +1 @@ -HELLO +ORANGE +マークは追加された行で、-マークは削除された行を意味しています。
上記の実行結果では -HELLO は HELLO が削除されたということ、 +ORANGE は ORANGE が追加されたことがわかります。
また、以下のコマンドで、現在はファイルと指定したコミットの差分を確認することができます。
git diff [コミットのハッシュ値] また、特定のコミット間の比較をすることもできます。
git diff [比較元のコミットのハッシュ値] [比較先のコミットのハッシュ値] ローカルリポジトリ内だけでなく、リモートブランチとも差分を比較することができます。
この場合はあらかじめ比較先のリモートブランチを git fetch コマンドで参照をダウンロードしておきましょう。
git fetch origin [リモートリポジトリのブランチ名] git diff [ローカルリポジトリのブランチ名] origin/[リモートリポジトリのブランチ名] </description>
    </item>
    <item>
      <title>変更を元に戻す</title>
      <link>https://a-nakamura1015.github.io/git-education/practical/undo/</link>
      <pubDate>Fri, 13 May 2022 19:12:09 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/practical/undo/</guid>
      <description>作業を進めていくと、「ファイルを変更したけど、やっぱり元に戻したい」ということや、
「コミットをしたけど無かったことにしたい」ということがあると思います。
このような場合も Git コマンドを駆使することで解消することができます。
ファイルの変更を取り消したい（git add をしていない場合） git checkout コマンドでファイルの変更を取り消すことができます。
git checkout というと、応用編のブランチの切り替えのときに登場しましたね。
この git checkout コマンドは、特定のブランチやコミットに切り替えたり、特定のコミットからファイルを取り出したりすることができます。
git checkout [変更を取り消したいファイルのパス] ステージングエリアへの追加（git add）を取り消したい 追加する必要のないファイルまで間違って git add してしまった場合（かつ、まだ commit はしていない場合）は以下のコマンドを実行することで git add を取り消せます。
ただ、厳密には git reset コマンドは git add を取り消すコマンドではなく、ステージングエリアをHEAD(最後にコミットした時の状態)にするコマンドです。
git reset [git add を取り消したいファイルのパス] コミットを取り消したい コミットを取り消したい場合はgit revertコマンドを実行しましょう。
以下のようにコマンドの後に取り消したいコミットのID（ハッシュ値）を指定します。
※コミットのID（ハッシュ値）はgit logで確認しましょう。
git revert [取り消したいコミットID] このコマンドを実行すると、指定したコミット時点の状態まで作業ディレクトリを戻します。
また、「コミットを取り消した」というコミット履歴が残ります。
このコミット履歴をリモートリポジトリにアップロードすることで、他のチームメンバーも取り消したコミットが見えなくなります。
Warning 他にも git reset コマンドでコミットを取り消すことができますが、このコマンドでコミットを消すと「コミットを取り消した」というコミット履歴が残りません。 一見使い勝手が良いように感じますが、リモートリポジトリで公開されているコミットに対して行うとリモートリポジトリにプッシュができなくなるという事象が起きるので注意が必要です。</description>
    </item>
    <item>
      <title>まとめ</title>
      <link>https://a-nakamura1015.github.io/git-education/practical/summary/</link>
      <pubDate>Wed, 16 Mar 2022 08:06:22 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/practical/summary/</guid>
      <description>これで Git の実践編は終了です。
実際のプロジェクトでも Git でのトラブルは度々起こると思われます。
しかし、「壊してしまった。。。」となっても元に戻せるのが Git の良いところです。
トラブルの原因を冷静に見極めて、正しい対処するように心がけましょう！</description>
    </item>
  </channel>
</rss>