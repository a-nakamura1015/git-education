<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>応用編 on Git X Edu</title>
    <link>https://a-nakamura1015.github.io/git-education/advanced/</link>
    <description>Recent content in 応用編 on Git X Edu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 16 Mar 2022 08:01:36 +0900</lastBuildDate><atom:link href="https://a-nakamura1015.github.io/git-education/advanced/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Git と チーム開発</title>
      <link>https://a-nakamura1015.github.io/git-education/advanced/team-development/</link>
      <pubDate>Wed, 16 Mar 2022 07:53:56 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/advanced/team-development/</guid>
      <description>基礎編をマスターすることができたのであれば、Git 管理をしながら開発することに自信を持つことができていると思います。
しかし、チーム開発で Git を扱うにはまだ学ばなければならないことがあります。 例えば、次のような状態になったとき、あなたはどうしますか？
あらまし 仮にチーム内で開発者とテスターが分かれていた場合でのお話です。
開発者AはテスターBにソースを渡すため、リモートリポジトリに変更を加えたソースを push しました。 ところが、テスターBが pull をしてテストをしたところバグが見つかりました。
そこで、テスターBは開発者Aにバグがあることを伝え、修正を依頼しました。 一見問題はなさそうですが、もし別の開発者Cがいた場合はどうでしょう？
開発者Cももちろんリモートリポジトリから最新のソースを取得して開発をおこないます。 リモートリポジトリから取得したソースにバグがあった場合、開発者Cにも影響を与えてしまいます。 このようなときに ブランチ は活躍します。
ブランチの運用方法は様々ですが、今回はデフォルトの main ブランチの他に開発用のブランチ（ develop ブランチ）を作成する運用をすることで今回の問題は解消されます。 ここからはブランチについて学んでいきましょう。</description>
    </item>
    <item>
      <title>Git のブランチ機能</title>
      <link>https://a-nakamura1015.github.io/git-education/advanced/branch/</link>
      <pubDate>Wed, 16 Mar 2022 07:55:03 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/advanced/branch/</guid>
      <description>ブランチとは ブランチは開発の本流から分岐し、本流の開発を邪魔することなく作業を続ける機能です。
ブランチを切ることにより、同時並行で目的別に作業をすることができます。
※ブランチを作ることを「ブランチを切る」と言います。
Git は main ブランチがデフォルトになっており、実は初級編では main ブランチで作業をしていました。
ブランチを活用できると以下のような流れで開発を進めることができるようになります。
他のメンバーの作業の影響を受けないように、メインのブランチから自分の作業専用のブランチを作成します。 メインブランチから自分の作業専用のブランチに切り替えて作業を行います。 作業が終わったら、メインのブランチに自分のブランチの変更を取り込んでいきます。 このようにすることで、他のメンバーの作業による影響を受けることなく自分の作業を進めることができます。
また、作業単位で履歴を残すことで、問題が発生した場合に原因となる変更箇所の調査や対策を行うことが容易になります。
また、Git ブランチには以下の特徴があります。
1つのブランチから複数のブランチを作ることができる 作業ブランチを元に新たなブランチを作ることができる 現在作業をしているブランチは以下のコマンドで確認をすることができます。
git branch git branch コマンドを実行すると、ローカルリポジトリ内のブランチ名の一覧が以下のように表示されます。 現在作業しているブランチの左隣に*が表示されます。
いまは main ブランチしかないため表示されるブランチ名は1つのみですが、
ブランチを増やすと現在作業していないブランチの名前もこのコマンドで確認することができます。
* main Warning Git のコミットログがない場合はブランチ名は表示されないので、コミットをした上でgit branchコマンドを実行しましょう。
一般的な開発プロジェクトでは main ブランチの内容が納品物（テストが完了した最新のソースコード）となるため、
機能の改修や追加する場合はこの main ブランチから開発用のブランチを切った上で作業を行います。
Tip ローカルリポジトリと同様にリモートリポジトリ（GitHubなど）にもブランチが存在します。
リモートリポジトリのブランチは git push コマンドを実行する際にブランチ名を指定することで生成されます。
ブランチを使ってみよう それでは開発用のブランチを作ってみましょう。
ブランチ名は自由につけることができますが、今回のブランチ名は develop にしましょう。
git branch コマンドの後ろに作成したいブランチの名前を指定すると同じ名前のブランチを作ることができます。
git branch develop 再度 git branch コマンドを実行すると以下のようにブランチの一覧が表示されます。
develop ブランチが作成できているかを確認してみましょう。
develop * main develop ブランチができていることが確認できたと思いますが、現在作業しているブランチを意味する*は main ブランチの左隣にあります。</description>
    </item>
    <item>
      <title>Git のマージ機能</title>
      <link>https://a-nakamura1015.github.io/git-education/advanced/merge/</link>
      <pubDate>Wed, 16 Mar 2022 07:57:26 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/advanced/merge/</guid>
      <description>マージとは さきほどはブランチを活用することで他のブランチに影響を与えることなく作業をすることができるとお伝えしました。
しかし、作成したブランチはあくまで開発用ブランチなので、作業が完了したら納品物となる main ブランチにその変更内容を反映させる必要があります。 このようにあるブランチに他のブランチの変更内容を反映させる作業をマージ（統合）といいます。 マージは git merge コマンドで行うことできますが、変更履歴を更新したいブランチで実行することに注意してください。
git merge コマンドの後ろに変更内容を取得したいブランチ名を指定します。
git merge [変更内容を取得したいブランチ名] マージをしてみよう 今回は main ブランチに develop ブランチの変更内容を反映させてみましょう。
まずは git branch コマンドを実行して、main ブランチが作業ブランチになっていることを確認しましょう。
※ 今回は変更履歴を更新したいブランチ = main ブランチです。
develop * main 続いて以下の git merge コマンドを実行します。変更内容を取得したいブランチ名は develop を指定しましょう。
git merge develop 以下のようなメッセージが表示されればマージは成功です！
Updating 5db36ee..1be05c7 Fast-forward sample.txt | 2 +- 1 file changed, 1 insertion(+), 1 deletion(-) それでは、マージ後の main ブランチの内容を確認してみましょう。
まずは cat コマンドで sample.txt の中身を確認してみましょう。
以下のように develop ブランチの内容に変わっていることが確認できます。</description>
    </item>
    <item>
      <title>GitHub のプルリクエスト機能</title>
      <link>https://a-nakamura1015.github.io/git-education/advanced/pull-request/</link>
      <pubDate>Wed, 16 Mar 2022 08:00:14 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/advanced/pull-request/</guid>
      <description>プルリクエストとは ここまでの学習内容をマスターできていれば、ローカルリポジトリで変更した内容をリモートリポジトリにアップロードすることができるようになっているはずです。
あとは変更内容をリモートリポジトリの main ブランチにマージするのみです。
しかし、ここで安易にリモートリポジトリの main ブランチにマージするのは危険です。
なぜなら、リモートリポジトリの main ブランチはチームで共有しているため、勝手に更新すると困ってしまうメンバーが出てきてしまうかもしれません。
また、そもそもローカルリポジトリで行った変更が正しくなかったり、対応が足りていなかったりする可能性もあります。
このようなときは プルリクエスト という GitHub の機能を利用します。
この機能を使用すると、簡単に他のメンバーに変更内容のレビューを依頼することができます。
他のメンバーにレビューしてもらうことで事前にトラブルやリスクを回避することができるのです。 Tip GitHub 以外のリモートリポジトリのサービスにもプルリクエストと同様の機能がありますが、名称が異なる場合があります。
例えば、GitLab の場合は同様の機能が「マージリクエスト」と呼称されています。
プルリクエストを作ってみよう 今回は以下の手順に沿って進めていき、最終的にはプルリクエストを作ってみましょう。
(1) ローカルリポジトリの develop ブランチで sample.txt の内容を「APPLE」に上書きします。
(2) リモートリポジトリに develop ブランチを作成し、変更内容をアップロードします。
(3) develop ブランチでの変更を main ブランチにマージする内容のプルリクエストを作成します。
(1) ローカルリポジトリの develop ブランチで sample.txt の内容を「APPLE」に上書きします。
まずはローカルリポジトリに作業用ブランチである develop ブランチを作成しましょう。
先程は git branch [ブランチ名] と git checkout [ブランチ名]を実行しましたが、
git checkout コマンドのオプション（-b）の後にブランチ名を指定すると、
この２つの処理を1つのコマンドで行うことができます。
git checkout -b [ブランチ名] 今回は develop ブランチを作成して、同ブランチを作業ブランチにしたいため以下のコマンドを実行します。
git checkout -b develop 作業ブランチに切り替わったので、以下のコマンドを実行して sample.</description>
    </item>
    <item>
      <title>まとめ</title>
      <link>https://a-nakamura1015.github.io/git-education/advanced/summary/</link>
      <pubDate>Wed, 16 Mar 2022 08:01:36 +0900</pubDate>
      <guid>https://a-nakamura1015.github.io/git-education/advanced/summary/</guid>
      <description>応用編では Git でチーム開発を行う方法について学習しました。
Git の開発フローとコマンドを理解できれば実際に活用するのは難しくありません。
それぞれのコマンドの意味を一つずつ確実に理解をしていきましょう。
この度紹介した開発フローとコマンドで事足りますが、Git を活用してもいろいろなトラブルが発生します。
例えば、複数人が同じファイルの同じ箇所を同時に変更したり、一度 Git にコミットした内容を取り消したいなどがあります。
このようなトラブルが起きたときはどのように解消したらよいかを 実践編 でお伝えします。
応用編で学んだことのまとめ </description>
    </item>
  </channel>
</rss>